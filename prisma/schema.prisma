generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  login      String   @unique
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  Token      Token?
  Cloud      Cloud?
}

model Token {
  id      Int    @id @default(autoincrement())
  refresh String
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int    @unique
}

model Cloud {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  memory    Int        @default(2000000000)
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @unique
  Statistic Statistic?
  Folder    Folder[]
}

model Folder {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  favorite   Boolean  @default(false)
  pined      Boolean  @default(false)
  freezed    Boolean  @default(false)
  trashed    Boolean  @default(false)
  Cloud      Cloud    @relation(fields: [cloudId], references: [id], onDelete: Cascade)
  cloudId    Int
  Parent     Folder?  @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId   Int?
  Children   Folder[] @relation("Parent")
  Files      File[]
  Trash      Trash?
}

model File {
  id         Int      @id @default(autoincrement())
  name       String
  pathName   String
  extension  String?
  size       Int      @default(0)
  favorite   Boolean  @default(false)
  pined      Boolean  @default(false)
  freezed    Boolean  @default(false)
  trashed    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Folder     Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   Int?
  Trash      Trash?
}

model Trash {
  id       Int     @id @default(autoincrement())
  dir      Boolean @default(false)
  parentId Int?
  Folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId Int?    @unique
  File     File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId   Int?    @unique
}

model Statistic {
  id          Int             @id @default(autoincrement())
  storeAmount Int             @default(2000000000)
  usedAmount  Int             @default(0)
  StatItems   StatisticItem[]
  Cloud       Cloud?          @relation(fields: [cloudId], references: [id], onDelete: Cascade)
  cloudId     Int?            @unique
}

model StatisticItem {
  id          Int       @id @default(autoincrement())
  type        String
  value       Int
  Statistic   Statistic @relation(fields: [statisticId], references: [id], onDelete: Cascade)
  statisticId Int
}
